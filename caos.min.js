document.addEventListener("DOMContentLoaded",(()=>{({settings:{threshold:0,once:!1},observer:null,parallaxElements:[],init(t={}){this.settings={...this.settings,...t};const e=document.querySelectorAll("[data-caos]");e.length?(this.observer=new IntersectionObserver(((t,e)=>{t.forEach((t=>{t.isIntersecting?(this.triggerAnimation(t.target),(this.settings.once||"true"===t.target.dataset.caosOnce)&&e.unobserve(t.target)):this.settings.once||"true"===t.target.dataset.caosOnce||this.resetAnimation(t.target)}))}),{threshold:this.settings.threshold}),e.forEach((t=>this.prepareElement(t))),this.initParallax()):console.warn("CAOS: No elements to animate found. Add 'data-caos' attribute to your HTML elements.")},prepareElement(t){const e=t.dataset.caosDuration,a=t.dataset.caosDelay;if(e&&(t.style.transitionDuration=`${e}ms`),a&&(t.style.transitionDelay=`${a}ms`),t.dataset.caos.includes("overlay")){const e=t.dataset.caosOverlayColor||"var(--primary-color)",a=t.querySelector(".caos-overlay");a?a.style.backgroundColor=e:console.warn("CAOS: Overlay element not found inside container:",t)}if("parallax"!==t.dataset.caos)this.observer.observe(t);else{const e=t.querySelector(".caos-parallax-bg");e?this.parallaxElements.push({container:t,bg:e}):console.warn("CAOS: Parallax background element not found inside container:",t)}},triggerAnimation(t){t.classList.add("caos-animate")},resetAnimation(t){t.classList.remove("caos-animate")},initParallax(){this.parallaxElements.length&&window.addEventListener("scroll",(()=>{window.requestAnimationFrame((()=>this.updateParallax()))}),{passive:!0})},updateParallax(){const t=window.innerHeight;this.parallaxElements.forEach((e=>{const a=e.container.getBoundingClientRect();if(a.bottom<0||a.top>t)return;const s=((t-a.top)/(t+a.height)-.5)*(e.bg.offsetHeight-e.container.offsetHeight)*.3;e.bg.style.transform=`translate3d(0, ${-s}px, 0)`}))}}).init({})}));
